name: Cross platform build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Installing MSYS2 and packages..."
          curl -L -o msys2.exe https://repo.msys2.org/distrib/x86_64/msys2-x86_64-latest.exe
          echo "Please use 'msys2/setup-msys2@v2' for proper MSYS2 installation instead."
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install cmake gcc
        else
          sudo apt update && sudo apt install -y cmake g++ clang
        fi


    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        install: >-
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-clang

    - name: Configure CMake
      run: cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run tests
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        if [ "$RUNNER_OS" = "Windows" ]; then
          ./main.exe
        else
          ./main
        fi
