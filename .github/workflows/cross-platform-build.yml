name: Cross platform build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "MSYS2 dependencies will be installed in the next step."
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install cmake
        else
          sudo apt update && sudo apt install -y cmake g++
        fi

    - name: Install MSYS2 packages (Windows only)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-gcc \
          mingw-w64-x86_64-clang

    - name: Configure CMake
      run: |
        cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      shell: ${{ runner.os == 'Windows' && matrix.c_compiler == 'cl' && 'cmd' || 'bash' }}

    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      shell: ${{ runner.os == 'Windows' && matrix.c_compiler == 'cl' && 'cmd' || 'bash' }}

    - name: Run tests
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./main.exe
        else
          ./main
        fi
